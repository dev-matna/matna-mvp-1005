import { motion, PanInfo } from "motion/react";
import { useState, useRef, useEffect } from "react";
import { VideoCard } from "./VideoCard";
import { ShareModal } from "./ShareModal";
import { FeedMode } from "./TopBar";
import { toast } from "sonner@2.0.3";
import { videoAPI } from "../utils/api";
import { useAudio } from "../utils/AudioContext";

interface Restaurant {
  name: string;
  location: string;
  rating: number;
  priceRange: string;
  category: string;
}

interface Video {
  id: string;
  videoUrl: string;
  thumbnail: string;
  title: string;
  user: {
    username: string;
    avatar: string;
    verified?: boolean;
    followers?: string;
  };
  restaurant: Restaurant;
  likes: number;
  isBookmarked: boolean;
}

const mockVideos: Video[] = [
  {
    id: "1",
    videoUrl: "https://www.youtube.com/embed/xZUaA5mmRl0?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=xZUaA5mmRl0",
    thumbnail: "https://img.youtube.com/vi/xZUaA5mmRl0/maxresdefault.jpg",
    title: "Îã§Í∞ÄÏÉùÍµ¨Ïù¥ ÎßõÏßë Î∞úÍ≤¨! üî• Ïù¥ ÏÉùÍ≥†Í∏∞ ÏßÑÏßú ÎåÄÎ∞ïÏù¥ÏóêÏöî #ÎßàÌè¨ÎßõÏßë #ÏÉùÍµ¨Ïù¥ #ÎßõÏä§ÌÉÄÍ∑∏Îû®",
    user: {
      username: "foodie_jane",
      avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b890?w=100&h=100&fit=crop&crop=face",
      verified: true,
      followers: "89K",
    },
    restaurant: {
      name: "Îã§Í∞ÄÏÉùÍµ¨Ïù¥",
      location: "ÏÑúÏö∏ ÎßàÌè¨Íµ¨ ÏÉàÏ∞ΩÎ°ú4Í∏∏ 16-10 1Ï∏µ",
      rating: 4.8,
      priceRange: "25,000Ïõê~40,000Ïõê",
      category: "ÌïúÏãù"
    },
    likes: 125400,
    isBookmarked: false,
  },
  {
    id: "1-2",
    videoUrl: "https://www.youtube.com/embed/odcA1IP2yL8?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=odcA1IP2yL8",
    thumbnail: "https://img.youtube.com/vi/odcA1IP2yL8/maxresdefault.jpg",
    title: "Îã§Í∞ÄÏÉùÍµ¨Ïù¥ ÏÇ¨Ïû•ÎãòÏù¥ ÏßÅÏ†ë ÏïåÎ†§Ï£ºÎäî ÎπÑÎ≤ï! üî• Ïù¥ÎûòÏÑú ÎßõÏûàÍµ¨ÎÇò #ÎßàÌè¨ÎßõÏßë #ÏÉùÍµ¨Ïù¥ #ÏöîÎ¶¨ÎπÑÎ≤ï",
    user: {
      username: "foodie_jane",
      avatar: "https://images.unsplash.com/photo-1494790108755-2616b612b890?w=100&h=100&fit=crop&crop=face",
      verified: true,
      followers: "89K",
    },
    restaurant: {
      name: "Îã§Í∞ÄÏÉùÍµ¨Ïù¥",
      location: "ÏÑúÏö∏ ÎßàÌè¨Íµ¨ ÏÉàÏ∞ΩÎ°ú4Í∏∏ 16-10 1Ï∏µ",
      rating: 4.8,
      priceRange: "25,000Ïõê~40,000Ïõê",
      category: "ÌïúÏãù"
    },
    likes: 89300,
    isBookmarked: true,
  },
  {
    id: "1-3",
    videoUrl: "https://www.youtube.com/embed/nMBE0myRTFU?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=nMBE0myRTFU",
    thumbnail: "https://img.youtube.com/vi/nMBE0myRTFU/maxresdefault.jpg",
    title: "Îã§Í∞ÄÏÉùÍµ¨Ïù¥ Ïà®ÏùÄ Î©îÎâ¥ Í≥µÍ∞ú! ü•© ÌòÑÏßÄÏù∏Îßå ÏïÑÎäî ÌäπÎ≥ÑÌïú Îßõ #ÎßàÌè¨ÎßõÏßë #ÏÉùÍµ¨Ïù¥ #Ïà®ÏùÄÎ©îÎâ¥",
    user: {
      username: "meat_master",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face",
      verified: true,
      followers: "203K",
    },
    restaurant: {
      name: "Îã§Í∞ÄÏÉùÍµ¨Ïù¥",
      location: "ÏÑúÏö∏ ÎßàÌè¨Íµ¨ ÏÉàÏ∞ΩÎ°ú4Í∏∏ 16-10 1Ï∏µ",
      rating: 4.8,
      priceRange: "25,000Ïõê~40,000Ïõê",
      category: "ÌïúÏãù"
    },
    likes: 156700,
    isBookmarked: false,
  },
  {
    id: "2-2",
    videoUrl: "https://www.youtube.com/embed/RW3IjL-uKKQ?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=RW3IjL-uKKQ",
    thumbnail: "https://img.youtube.com/vi/RW3IjL-uKKQ/maxresdefault.jpg",
    title: "Ïù¥ÏπòÎùºÏø† ÎùºÎ©ò Ïà®ÏùÄ Î©îÎâ¥ Í≥µÍ∞ú! üçú ÌòÑÏßÄÏù∏Îßå ÏïÑÎäî ÌäπÎ≥ÑÌïú Îßõ #Í∞ïÎÇ®ÎßõÏßë #ÎùºÎ©ò #Ïà®ÏùÄÎ©îÎâ¥",
    user: {
      username: "ramen_lover",
      avatar: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face",
      verified: false,
      followers: "67K",
    },
    restaurant: {
      name: "Ïù¥ÏπòÎùºÏø† ÎùºÎ©ò",
      location: "Í∞ïÎÇ®Ïó≠ 11Î≤à Ï∂úÍµ¨",
      rating: 4.6,
      priceRange: "12,000Ïõê~18,000Ïõê",
      category: "ÏùºÏãù"
    },
    likes: 67800,
    isBookmarked: false,
  },
  {
    id: "2-3",
    videoUrl: "https://www.youtube.com/embed/YgRBs6Y-4Gs?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=YgRBs6Y-4Gs",
    thumbnail: "https://img.youtube.com/vi/YgRBs6Y-4Gs/maxresdefault.jpg",
    title: "Ïù¥ÏπòÎùºÏø† ÎùºÎ©ò ÏÇ¨Ïû•Îãò Ïù∏ÌÑ∞Î∑∞! üçú ÏùºÎ≥∏ÏóêÏÑú Ïò® ÏßÑÏßú Î†àÏãúÌîº #Í∞ïÎÇ®ÎßõÏßë #ÎùºÎ©ò #ÏÇ¨Ïû•ÎãòÏù∏ÌÑ∞Î∑∞",
    user: {
      username: "food_reporter",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face",
      verified: true,
      followers: "125K",
    },
    restaurant: {
      name: "Ïù¥ÏπòÎùºÏø† ÎùºÎ©ò",
      location: "Í∞ïÎÇ®Ïó≠ 11Î≤à Ï∂úÍµ¨",
      rating: 4.6,
      priceRange: "12,000Ïõê~18,000Ïõê",
      category: "ÏùºÏãù"
    },
    likes: 145600,
    isBookmarked: false,
  },
  {
    id: "3",
    videoUrl: "https://www.youtube.com/embed/xZUaA5mmRl0?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=xZUaA5mmRl0",
    thumbnail: "https://img.youtube.com/vi/xZUaA5mmRl0/maxresdefault.jpg",
    title: "ÏÑúÏö∏ ÏµúÍ≥†Ïùò Í≥†Í∏∞Ïßë ü•© Ïù¥ ÎßàÎ∏îÎßÅ Ïã§ÌôîÎÉê? #Í≥†Í∏∞ÎßõÏßë #ÌïúÏö∞ #ÏÑúÏö∏ÎßõÏßë",
    user: {
      username: "meat_master",
      avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face",
      verified: true,
      followers: "203K",
    },
    restaurant: {
      name: "ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌïúÏö∞",
      location: "Ï≤≠Îã¥Îèô Î°úÎç∞Ïò§Í±∞Î¶¨",
      rating: 4.9,
      priceRange: "80,000Ïõê~120,000Ïõê",
      category: "ÌïúÏãù"
    },
    likes: 256800,
    isBookmarked: false,
  },
  {
    id: "4",
    videoUrl: "https://www.youtube.com/embed/odcA1IP2yL8?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=odcA1IP2yL8",
    thumbnail: "https://img.youtube.com/vi/odcA1IP2yL8/maxresdefault.jpg",
    title: "Ïã†ÏÉÅ ÎîîÏ†ÄÌä∏ Ïπ¥Ìéò ‚ú® Ïù¥ ÏºÄÏù¥ÌÅ¨ ÎπÑÏ£ºÏñº ÎØ∏Ï≥§Îã§! #ÎîîÏ†ÄÌä∏Ïπ¥Ìéò #ÏºÄÏù¥ÌÅ¨ #Ïã†ÏÉÅÎßõÏßë",
    user: {
      username: "dessert_queen",
      avatar: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face",
      verified: false,
      followers: "45K",
    },
    restaurant: {
      name: "Îã¨ÏΩ§Ìïú ÌïòÎ£®",
      location: "Í∞ÄÎ°úÏàòÍ∏∏ Ï§ëÏïô",
      rating: 4.7,
      priceRange: "8,000Ïõê~15,000Ïõê",
      category: "ÎîîÏ†ÄÌä∏"
    },
    likes: 67300,
    isBookmarked: false,
  },
  {
    id: "5",
    videoUrl: "https://www.youtube.com/embed/nMBE0myRTFU?autoplay=1&mute=1&loop=1&controls=0&rel=0&modestbranding=1&playsinline=1&playlist=nMBE0myRTFU",
    thumbnail: "https://img.youtube.com/vi/nMBE0myRTFU/maxresdefault.jpg",
    title: "Ïù¥ÌÉúÏõê ÏßÑÏßú ÎßõÏûàÎäî ÌîºÏûêÏßë üçï ÌòÑÏßÄÏù∏Ïù¥ Ïù∏Ï†ïÌïú Í∑∏ Îßõ! #Ïù¥ÌÉúÏõêÎßõÏßë #ÌîºÏûê #Ïù¥ÌÉàÎ¶¨Ïïà",
    user: {
      username: "pizza_hunter",
      avatar: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=100&h=100&fit=crop&crop=face",
      verified: true,
      followers: "156K",
    },
    restaurant: {
      name: "ÎÇòÌè¥Î¶¨ ÌîºÏûêÌïòÏö∞Ïä§",
      location: "Ïù¥ÌÉúÏõêÏó≠ 1Î≤à Ï∂úÍµ¨",
      rating: 4.5,
      priceRange: "18,000Ïõê~28,000Ïõê",
      category: "ÏñëÏãù"
    },
    likes: 198500,
    isBookmarked: true,
  },
];

interface VideoFeedProps {
  feedMode: FeedMode;
  immersiveMode: boolean;
  sharedVideoId?: string | null;
  onRestaurantSelect: (restaurant: any) => void;
  onInfluencerSelect: (influencer: any) => void;
  onReservationComplete?: (reservationData: any) => void;
  onImmersiveModeToggle?: () => void;
  onSharedVideoProcessed?: () => void;
}

export function VideoFeed({ feedMode, immersiveMode, sharedVideoId, onRestaurantSelect, onInfluencerSelect, onReservationComplete, onImmersiveModeToggle, onSharedVideoProcessed }: VideoFeedProps) {
  const { globalMuted } = useAudio();
  const [videos, setVideos] = useState<Video[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [currentRestaurantIndex, setCurrentRestaurantIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [isInitialLoading, setIsInitialLoading] = useState(true);
  const [hasMore, setHasMore] = useState(true);
  const [currentPage, setCurrentPage] = useState(0);
  const constraintsRef = useRef(null);
  
  // Share Modal ÏÉÅÌÉú
  const [shareModalOpen, setShareModalOpen] = useState(false);
  const [shareModalData, setShareModalData] = useState<{
    url: string;
    title: string;
    text: string;
  } | null>(null);

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadInitialVideos = async () => {
    try {
      setIsInitialLoading(true);
      const response = await videoAPI.getVideos(0, 10, feedMode);
      setVideos(response.videos);
      setHasMore(response.hasMore);
      setCurrentPage(1);
    } catch (error) {
      console.error("Error loading initial videos:", error);
      toast.error("ÏòÅÏÉÅÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§");
      // Ïã§Ìå® Ïãú Î™©ÏóÖ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      setVideos(mockVideos);
    } finally {
      setIsInitialLoading(false);
    }
  };

  // Îçî ÎßéÏùÄ ÏòÅÏÉÅ Î°úÎìú
  const loadMoreVideos = async () => {
    if (isLoading || !hasMore) return;
    
    try {
      setIsLoading(true);
      const response = await videoAPI.getVideos(currentPage, 10, feedMode);
      
      setVideos(prev => {
        const updatedVideos = [...prev, ...response.videos];
        // Î©îÎ™®Î¶¨ ÏµúÏ†ÅÌôî: 100Í∞ú Ïù¥ÏÉÅÏù¥Î©¥ ÏïûÏ™Ω 20Í∞ú Ï†úÍ±∞
        if (updatedVideos.length > 100) {
          const trimmedVideos = updatedVideos.slice(20);
          // ÌòÑÏû¨ Ïù∏Îç±Ïä§ÎèÑ Ï°∞Ï†ï
          setCurrentIndex(prevIndex => Math.max(0, prevIndex - 20));
          setCurrentPage(prev => Math.max(0, prev - 2)); // ÌéòÏù¥ÏßÄÎèÑ Ï°∞Ï†ï
          return trimmedVideos;
        }
        return updatedVideos;
      });
      
      setHasMore(response.hasMore);
      setCurrentPage(prev => prev + 1);
    } catch (error) {
      console.error("Error loading more videos:", error);
      toast.error("Ï∂îÍ∞Ä ÏòÅÏÉÅÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§");
    } finally {
      setIsLoading(false);
    }
  };

  // Ï¥àÍ∏∞ Î°úÎìú Î∞è feedMode Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ Î¶¨Î°úÎìú
  useEffect(() => {
    loadInitialVideos();
    setCurrentIndex(0);
    setCurrentRestaurantIndex(0);
  }, [feedMode]);

  // Í≥µÏú†Îêú ÎπÑÎîîÏò§ Ï≤òÎ¶¨
  useEffect(() => {
    if (sharedVideoId && videos.length > 0) {
      const processedVideos = getProcessedVideos();
      const sharedVideoIndex = processedVideos.findIndex(video => video.id === sharedVideoId);
      
      if (sharedVideoIndex !== -1) {
        const sharedVideo = processedVideos[sharedVideoIndex];
        const groupedByRestaurant = processedVideos.reduce((acc, video) => {
          const restaurantName = video.restaurant.name;
          if (!acc[restaurantName]) {
            acc[restaurantName] = [];
          }
          acc[restaurantName].push(video);
          return acc;
        }, {} as Record<string, Video[]>);
        
        const restaurantNames = Object.keys(groupedByRestaurant);
        const sharedRestaurantIndex = restaurantNames.findIndex(name => name === sharedVideo.restaurant.name);
        const sharedVideoInRestaurantIndex = groupedByRestaurant[sharedVideo.restaurant.name].findIndex(v => v.id === sharedVideoId);
        
        if (sharedRestaurantIndex !== -1) {
          setCurrentIndex(sharedRestaurantIndex);
          setCurrentRestaurantIndex(sharedVideoInRestaurantIndex);
          
          toast.success("Í≥µÏú†Îêú ÏòÅÏÉÅÏúºÎ°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§ üé¨", {
            duration: 3000,
          });
          
          // Ï≤òÎ¶¨ ÏôÑÎ£å ÏïåÎ¶º
          if (onSharedVideoProcessed) {
            onSharedVideoProcessed();
          }
        }
      } else {
        toast.error("Í≥µÏú†Îêú ÏòÅÏÉÅÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§", {
          duration: 3000,
        });
        
        if (onSharedVideoProcessed) {
          onSharedVideoProcessed();
        }
      }
    }
  }, [sharedVideoId, videos]);

  // Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Ìä∏Î¶¨Í±∞
  useEffect(() => {
    if (videos.length === 0) return;
    
    const processedVideos = getProcessedVideos();
    const groupedByRestaurant = processedVideos.reduce((acc, video) => {
      const restaurantName = video.restaurant.name;
      if (!acc[restaurantName]) {
        acc[restaurantName] = [];
      }
      acc[restaurantName].push(video);
      return acc;
    }, {} as Record<string, Video[]>);
    
    const restaurantNames = Object.keys(groupedByRestaurant);
    
    // ÎÅùÏóêÏÑú 2Í∞ú Î†àÏä§ÌÜ†Îûë ÎÇ®ÏïòÏùÑ Îïå ÏÉà Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    if (currentIndex >= restaurantNames.length - 2 && hasMore && !isLoading) {
      loadMoreVideos();
    }
  }, [currentIndex, videos, hasMore, isLoading]);

  // feedModeÏóê Îî∞Î•∏ ÏòÅÏÉÅ Ï†ïÎ†¨ Î∞è ÌïÑÌÑ∞ÎßÅ
  const getProcessedVideos = () => {
    let processedVideos = [...videos];
    
    if (feedMode === 'trending') {
      // Ìä∏Î†åÎî© ÏïåÍ≥†Î¶¨Ï¶ò: Ï¢ãÏïÑÏöî Ïàò, Ï†ÑÌôòÏú®, ÏµúÍ∑º ÏÑ±Í≥º Í∏∞Î∞ò Ï†ïÎ†¨
      processedVideos.sort((a, b) => {
        // Í∞ÑÎã®Ìïú Ìä∏Î†åÎî© Ïä§ÏΩîÏñ¥ Í≥ÑÏÇ∞ (Ïã§Ï†úÎ°úÎäî Îçî Î≥µÏû°Ìïú ÏïåÍ≥†Î¶¨Ï¶ò)
        const scoreA = a.likes * 0.6 + (a.restaurant.rating * 10000) * 0.4;
        const scoreB = b.likes * 0.6 + (b.restaurant.rating * 10000) * 0.4;
        return scoreB - scoreA;
      });
    } else if (feedMode === 'nearby') {
      // ÎÇ¥ Ï£ºÎ≥Ä ÏïåÍ≥†Î¶¨Ï¶ò: Í±∞Î¶¨ Í∏∞Î∞ò (mockÏúºÎ°ú Í∞ïÎÇ®Íµ¨ Í∏∞Ï§Ä)
      const nearbyAreas = ['Í∞ïÎÇ®', 'ÏÑúÏ¥à', 'ÏÜ°Ìåå', 'ÎßàÌè¨', 'Ïö©ÏÇ∞'];
      processedVideos.sort((a, b) => {
        const aIsNearby = nearbyAreas.some(area => a.restaurant.location.includes(area));
        const bIsNearby = nearbyAreas.some(area => b.restaurant.location.includes(area));
        
        if (aIsNearby && !bIsNearby) return -1;
        if (!aIsNearby && bIsNearby) return 1;
        
        // Í∞ôÏùÄ ÏßÄÏó≠Ïù¥Î©¥ ÌèâÏ†ê Ïàú
        return b.restaurant.rating - a.restaurant.rating;
      });
    }
    
    return processedVideos;
  };

  const processedVideos = getProcessedVideos();

  // Î†àÏä§ÌÜ†ÎûëÎ≥ÑÎ°ú ÏòÅÏÉÅ Í∑∏Î£πÌôî
  const groupedByRestaurant = processedVideos.reduce((acc, video) => {
    const restaurantName = video.restaurant.name;
    if (!acc[restaurantName]) {
      acc[restaurantName] = [];
    }
    acc[restaurantName].push(video);
    return acc;
  }, {} as Record<string, Video[]>);

  const restaurantNames = Object.keys(groupedByRestaurant);
  const currentRestaurant = restaurantNames[currentIndex];
  const currentRestaurantVideos = groupedByRestaurant[currentRestaurant] || [];
  const currentVideo = currentRestaurantVideos[currentRestaurantIndex];

  const handleBookmark = async (videoId: string) => {
    try {
      const response = await videoAPI.toggleBookmark(videoId);
      
      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setVideos(prev => prev.map(video => 
        video.id === videoId 
          ? { ...video, isBookmarked: response.isBookmarked }
          : video
      ));
      
      toast.success(
        response.isBookmarked 
          ? "Î∂ÅÎßàÌÅ¨Ïóê Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§ ‚≠ê" 
          : "Î∂ÅÎßàÌÅ¨ÏóêÏÑú Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§"
      );
    } catch (error) {
      console.error("Error toggling bookmark:", error);
      toast.error("Î∂ÅÎßàÌÅ¨ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§");
    }
  };

  // ÎîîÎ∞îÏù¥Ïä§ ÌÉÄÏûÖ Í∞êÏßÄ
  const isMobile = () => {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           (window.innerWidth <= 768);
  };

  // ÌÑ∞Ïπò ÎîîÎ∞îÏù¥Ïä§ Í∞êÏßÄ
  const isTouchDevice = () => {
    return ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);
  };

  const handleShare = async (videoId: string) => {
    try {
      const video = videos.find(v => v.id === videoId);
      if (!video) return;

      // Í≥µÏú† URL ÏÉùÏÑ±
      const shareUrl = `${window.location.origin}?video=${videoId}`;
      
      // ÏÜåÏÖú ÎØ∏ÎîîÏñ¥ ÏµúÏ†ÅÌôîÎêú ÌÖçÏä§Ìä∏ Íµ¨ÏÑ±
      const hashtags = `#FoodieClips #ÎßõÏßë #${video.restaurant.category} #ÎßõÏä§ÌÉÄÍ∑∏Îû®`;
      const shareTitle = `üçΩÔ∏è ${video.restaurant.name} | FoodieClips`;
      const shareText = `${video.title}

üè™ ${video.restaurant.name}
üìç ${video.restaurant.location}
‚≠ê ${video.restaurant.rating}/5.0
üí∞ ${video.restaurant.priceRange}

${hashtags}`;

      // Web Share API Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±
      const shareData = {
        title: shareTitle,
        text: shareText,
        url: shareUrl
      };

      // 1. Web Share API Ïö∞ÏÑ† ÏãúÎèÑ (Î™®Î∞îÏùº & ÏßÄÏõê Î∏åÎùºÏö∞Ï†Ä)
      if (navigator.share) {
        try {
          // canShareÍ∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Î∞îÎ°ú ÏãúÎèÑ
          if (!navigator.canShare || navigator.canShare(shareData)) {
            await navigator.share(shareData);
            
            // ÏÑ±Í≥µ ÌîºÎìúÎ∞±
            toast.success("Í≥µÏú†Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! üì§", {
              description: isMobile() ? "ÏπúÍµ¨Îì§ÏóêÍ≤å ÎßõÏßëÏùÑ Í≥µÏú†ÌñàÏñ¥Ïöî" : "Í≥µÏú†ÎêòÏóàÏäµÎãàÎã§",
              duration: 3000,
            });
            return;
          }
        } catch (shareError) {
          // ÏÇ¨Ïö©ÏûêÍ∞Ä Í≥µÏú†Î•º Ï∑®ÏÜåÌïú Í≤ΩÏö∞Îäî ÏóêÎü¨Í∞Ä ÏïÑÎãò
          if (shareError.name === 'AbortError') {
            return; // Ï°∞Ïö©Ìûà Ï¢ÖÎ£å
          }
          console.warn("Web Share API failed:", shareError);
        }
      }

      // 2. ÏïàÏ†ÑÌïú execCommand Î∞©Ïãù (clipboard API Í±¥ÎÑàÎõ∞Í∏∞)
      const fullShareText = `${shareTitle}\n\n${shareText}\n\nüîó ${shareUrl}`;
      
      const safeCopyToClipboard = (text: string): boolean => {
        try {
          // ÏûÑÏãú ÌÖçÏä§Ìä∏ ÏòÅÏó≠ ÏÉùÏÑ±
          const textArea = document.createElement('textarea');
          textArea.value = text;
          
          // Î≥¥Ïù¥ÏßÄ ÏïäÍ≤å Ïä§ÌÉÄÏùºÎßÅ (ÌôîÎ©¥ÏóêÏÑú ÏôÑÏ†ÑÌûà Ïà®ÍπÄ)
          textArea.style.position = 'absolute';
          textArea.style.left = '-9999px';
          textArea.style.top = '-9999px';
          textArea.style.width = '1px';
          textArea.style.height = '1px';
          textArea.style.opacity = '0';
          textArea.style.border = 'none';
          textArea.style.outline = 'none';
          textArea.style.boxShadow = 'none';
          textArea.style.background = 'transparent';
          textArea.setAttribute('readonly', '');
          textArea.setAttribute('aria-hidden', 'true');
          textArea.setAttribute('tabindex', '-1');
          
          // DOMÏóê Ï∂îÍ∞Ä
          document.body.appendChild(textArea);
          
          // ÌÖçÏä§Ìä∏ ÏÑ†ÌÉù
          textArea.focus();
          textArea.select();
          textArea.setSelectionRange(0, textArea.value.length);
          
          // Î≥µÏÇ¨ Ïã§Ìñâ
          let successful = false;
          try {
            successful = document.execCommand('copy');
          } catch (err) {
            console.warn('execCommand copy failed:', err);
            successful = false;
          }
          
          // Ï†ïÎ¶¨
          document.body.removeChild(textArea);
          
          return successful;
        } catch (error) {
          console.warn('Safe copy to clipboard failed:', error);
          return false;
        }
      };

      // Î≥µÏÇ¨ ÏãúÎèÑ
      const copySuccess = safeCopyToClipboard(fullShareText);
      
      if (copySuccess) {
        toast.success("ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§! üìã", {
          description: isMobile() 
            ? "Ïπ¥Ïπ¥Ïò§ÌÜ°, Î©îÏã†Ï†Ä Îì±Ïóê Î∂ôÏó¨ÎÑ£Í∏∞ÌïòÏÑ∏Ïöî" 
            : "Ctrl+VÎ°ú Ïñ¥ÎîîÎì† Î∂ôÏó¨ÎÑ£Í∏∞ Í∞ÄÎä•Ìï©ÎãàÎã§",
          duration: 4000,
        });
      } else {
        // 3. Î™®Îì† ÏûêÎèô Î∞©Î≤ï Ïã§Ìå® Ïãú - ÏàòÎèô ÏïàÎÇ¥ UI
        showManualShareGuide(shareUrl, shareTitle);
      }

    } catch (error) {
      console.error("Error sharing:", error);
      toast.error("Í≥µÏú† Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§", {
        description: "Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî",
        duration: 3000,
      });
    }
  };

  // ÏàòÎèô Í≥µÏú† ÏïàÎÇ¥ Ìï®Ïàò
  const showManualShareGuide = (url: string, title: string) => {
    const video = videos.find(v => url.includes(v.id));
    if (!video) return;

    const hashtags = `#FoodieClips #ÎßõÏßë #${video.restaurant.category} #ÎßõÏä§ÌÉÄÍ∑∏Îû®`;
    const shareText = `${video.title}

üè™ ${video.restaurant.name}
üìç ${video.restaurant.location}
‚≠ê ${video.restaurant.rating}/5.0
üí∞ ${video.restaurant.priceRange}

${hashtags}`;

    setShareModalData({
      url,
      title,
      text: shareText
    });
    setShareModalOpen(true);
  };

  const handleReservationComplete = (reservationData: any) => {
    console.log("ÏòàÏïΩ ÏôÑÎ£å:", reservationData);
    // App.tsxÏùò ÏΩúÎ∞± Ìò∏Ï∂úÌïòÏó¨ ÏòàÏïΩ Î™©Î°ù ÏóÖÎç∞Ïù¥Ìä∏
    if (onReservationComplete) {
      onReservationComplete(reservationData);
    }
    // ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄÎ°ú ÏòàÏïΩ ÏôÑÎ£å ÏïåÎ¶º
    toast.success(`üéâ ${reservationData.restaurant}Ïóê ÏòàÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!`);
  };

  const handleDragEnd = (event: any, info: PanInfo) => {
    const threshold = 100;
    const absX = Math.abs(info.offset.x);
    const absY = Math.abs(info.offset.y);
    
    // ÏàòÏßÅ ÎìúÎûòÍ∑∏Í∞Ä Îçî ÌÅ¥ Îïå - Îã§Î•∏ Î†àÏä§ÌÜ†ÎûëÏúºÎ°ú Ïù¥Îèô
    if (absY > absX) {
      if (info.offset.y < -threshold && currentIndex < restaurantNames.length - 1) {
        setCurrentIndex(prev => prev + 1);
        setCurrentRestaurantIndex(0); // ÏÉà Î†àÏä§ÌÜ†ÎûëÏùò Ï≤´ Î≤àÏß∏ ÏòÅÏÉÅÏúºÎ°ú
      } else if (info.offset.y > threshold && currentIndex > 0) {
        setCurrentIndex(prev => prev - 1);
        setCurrentRestaurantIndex(0); // ÏÉà Î†àÏä§ÌÜ†ÎûëÏùò Ï≤´ Î≤àÏß∏ ÏòÅÏÉÅÏúºÎ°ú
      }
    }
    // ÏàòÌèâ ÎìúÎûòÍ∑∏Í∞Ä Îçî ÌÅ¥ Îïå - Í∞ôÏùÄ Î†àÏä§ÌÜ†Îûë ÎÇ¥ Îã§Î•∏ ÏòÅÏÉÅÏúºÎ°ú Ïù¥Îèô ÎòêÎäî Í∞ÄÍ≤å Ï†ïÎ≥¥Î°ú Ïù¥Îèô
    else if (absX > absY) {
      if (info.offset.x > threshold && currentRestaurantIndex > 0) {
        // ÏôºÏ™Ω Ïä§ÏôÄÏù¥ÌîÑ: Ïù¥Ï†Ñ ÏòÅÏÉÅÏúºÎ°ú
        setCurrentRestaurantIndex(prev => prev - 1);
      } else if (info.offset.x < -threshold) {
        // Ïò§Î•∏Ï™Ω Ïä§ÏôÄÏù¥ÌîÑ
        if (currentRestaurantIndex < currentRestaurantVideos.length - 1) {
          // Îã§Ïùå ÏòÅÏÉÅÏù¥ ÏûàÏúºÎ©¥ Îã§Ïùå ÏòÅÏÉÅÏúºÎ°ú
          setCurrentRestaurantIndex(prev => prev + 1);
        } else {
          // ÎßàÏßÄÎßâ ÏòÅÏÉÅÏóêÏÑú Ïò§Î•∏Ï™Ω Ïä§ÏôÄÏù¥ÌîÑÌïòÎ©¥ Í∞ÄÍ≤å Ï†ïÎ≥¥ ÌéòÏù¥ÏßÄÎ°ú
          onRestaurantSelect(currentVideo.restaurant);
        }
      }
    }
  };

  return (
    <div className="relative h-screen overflow-hidden bg-black">
      {/* Initial Loading */}
      {isInitialLoading && (
        <div className="flex items-center justify-center h-full bg-black">
          <div className="text-center">
            <div className="w-12 h-12 border-3 border-red-500/30 border-t-red-500 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-white text-lg">FoodieClips Î°úÎî© Ï§ë...</p>
            <p className="text-white/60 text-sm mt-2">ÎßõÏûàÎäî ÏòÅÏÉÅÎì§ÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî üçΩÔ∏è</p>
          </div>
        </div>
      )}

      {/* Video Feed */}
      {!isInitialLoading && (
        <div className="relative h-full" ref={constraintsRef}>
        <motion.div
          className="w-full h-full"
          style={{
            userSelect: 'none',
            WebkitUserSelect: 'none',
            WebkitUserDrag: 'none',
            WebkitTouchCallout: 'none',
            touchAction: 'pan-x pan-y',
            overscrollBehavior: 'none'
          }}
          onPanEnd={handleDragEnd}
        >
          {currentVideo && (
            <VideoCard
              key={currentVideo.id}
              {...currentVideo}
              isActive={true}
              immersiveMode={immersiveMode}
              restaurantVideoCount={currentRestaurantVideos.length}
              currentRestaurantVideoIndex={currentRestaurantIndex}
              onBookmark={() => handleBookmark(currentVideo.id)}
              onShare={() => handleShare(currentVideo.id)}
              onRestaurantClick={() => onRestaurantSelect(currentVideo.restaurant)}
              onInfluencerClick={() => onInfluencerSelect(currentVideo.user)}
              onReservationComplete={handleReservationComplete}
              onImmersiveModeToggle={onImmersiveModeToggle}
            />
          )}
        </motion.div>

        {/* Restaurant Video Indicators */}
        {currentRestaurantVideos.length > 1 && (
          <motion.div 
            className="absolute top-20 right-4 bg-black/50 backdrop-blur-sm rounded-full px-3 py-1"
            initial={{ opacity: 1, x: 0 }}
            animate={{ 
              opacity: immersiveMode ? 0 : 1,
              x: immersiveMode ? 100 : 0
            }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
          >
            <div className="flex items-center gap-1">
              {currentRestaurantVideos.map((_, index) => (
                <div
                  key={index}
                  className={`w-2 h-2 rounded-full transition-colors ${
                    index === currentRestaurantIndex ? "bg-white" : "bg-white/40"
                  }`}
                />
              ))}
            </div>
          </motion.div>
        )}

        {/* Swipe Hint */}
        <motion.div 
          className="absolute top-28 right-4 bg-black/50 backdrop-blur-sm rounded-lg px-2 py-1"
          initial={{ opacity: 1, x: 0 }}
          animate={{ 
            opacity: immersiveMode ? 0 : 1,
            x: immersiveMode ? 100 : 0
          }}
          transition={{ duration: 0.3, ease: "easeInOut" }}
        >
          {currentRestaurantIndex < currentRestaurantVideos.length - 1 ? (
            <p className="text-white text-xs">
              ‚Üê Í∞ôÏùÄ Í∞ÄÍ≤å ÏòÅÏÉÅ {currentRestaurantVideos.length - currentRestaurantIndex - 1}Í∞ú Îçî
            </p>
          ) : (
            <p className="text-white text-xs">
              ‚Üí Í∞ÄÍ≤å Ï†ïÎ≥¥ Î≥¥Í∏∞
            </p>
          )}
        </motion.div>

        {/* Loading Indicator */}
        {isLoading && (
          <motion.div 
            className="absolute bottom-24 left-1/2 transform -translate-x-1/2 bg-black/50 backdrop-blur-sm rounded-full px-4 py-2"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
          >
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
              <p className="text-white text-sm">ÏÉàÎ°úÏö¥ ÎßõÏßë Î∞úÍ≤¨ Ï§ë...</p>
            </div>
          </motion.div>
        )}

        {/* Restaurant Scroll Indicators */}
        <motion.div 
          className="absolute right-2 top-1/2 transform -translate-y-1/2 flex flex-col gap-2"
          initial={{ opacity: 1, x: 0 }}
          animate={{ 
            opacity: immersiveMode ? 0 : 1,
            x: immersiveMode ? 50 : 0
          }}
          transition={{ duration: 0.3, ease: "easeInOut" }}
        >
          {restaurantNames.slice(0, 8).map((_, index) => (
            <div
              key={index}
              className={`w-1 h-8 rounded-full transition-colors ${
                index === currentIndex ? "bg-red-500" : "bg-white/30"
              }`}
            />
          ))}
          {restaurantNames.length > 8 && (
            <div className="w-1 h-2 rounded-full bg-white/20"></div>
          )}
        </motion.div>
        </div>
      )}

      {/* Share Modal */}
      {shareModalData && (
        <ShareModal
          isOpen={shareModalOpen}
          onClose={() => {
            setShareModalOpen(false);
            setShareModalData(null);
          }}
          shareUrl={shareModalData.url}
          shareTitle={shareModalData.title}
          shareText={shareModalData.text}
        />
      )}
    </div>
  );
}